// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ethereum_types.proto

package messages

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// *
// Structure representing Ethereum transaction
type EthereumTransactionType struct {
	Nonce                []byte   `protobuf:"bytes,1,req,name=nonce" json:"nonce,omitempty"`
	GasPrice             []byte   `protobuf:"bytes,2,req,name=gasPrice" json:"gasPrice,omitempty"`
	GasLimit             []byte   `protobuf:"bytes,3,req,name=gasLimit" json:"gasLimit,omitempty"`
	RecipientAddress     []byte   `protobuf:"bytes,4,opt,name=recipient_address,json=recipientAddress" json:"recipient_address,omitempty"`
	Coins                []byte   `protobuf:"bytes,5,req,name=coins" json:"coins,omitempty"`
	ChainId              *uint32  `protobuf:"varint,6,opt,name=chain_id,json=chainId" json:"chain_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EthereumTransactionType) Reset()         { *m = EthereumTransactionType{} }
func (m *EthereumTransactionType) String() string { return proto.CompactTextString(m) }
func (*EthereumTransactionType) ProtoMessage()    {}
func (*EthereumTransactionType) Descriptor() ([]byte, []int) {
	return fileDescriptor_ethereum_types_fb0e9e73f4fb0ced, []int{0}
}
func (m *EthereumTransactionType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EthereumTransactionType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EthereumTransactionType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *EthereumTransactionType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EthereumTransactionType.Merge(dst, src)
}
func (m *EthereumTransactionType) XXX_Size() int {
	return m.Size()
}
func (m *EthereumTransactionType) XXX_DiscardUnknown() {
	xxx_messageInfo_EthereumTransactionType.DiscardUnknown(m)
}

var xxx_messageInfo_EthereumTransactionType proto.InternalMessageInfo

func (m *EthereumTransactionType) GetNonce() []byte {
	if m != nil {
		return m.Nonce
	}
	return nil
}

func (m *EthereumTransactionType) GetGasPrice() []byte {
	if m != nil {
		return m.GasPrice
	}
	return nil
}

func (m *EthereumTransactionType) GetGasLimit() []byte {
	if m != nil {
		return m.GasLimit
	}
	return nil
}

func (m *EthereumTransactionType) GetRecipientAddress() []byte {
	if m != nil {
		return m.RecipientAddress
	}
	return nil
}

func (m *EthereumTransactionType) GetCoins() []byte {
	if m != nil {
		return m.Coins
	}
	return nil
}

func (m *EthereumTransactionType) GetChainId() uint32 {
	if m != nil && m.ChainId != nil {
		return *m.ChainId
	}
	return 0
}

func init() {
	proto.RegisterType((*EthereumTransactionType)(nil), "EthereumTransactionType")
}
func (m *EthereumTransactionType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EthereumTransactionType) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Nonce == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("nonce")
	} else {
		dAtA[i] = 0xa
		i++
		i = encodeVarintEthereumTypes(dAtA, i, uint64(len(m.Nonce)))
		i += copy(dAtA[i:], m.Nonce)
	}
	if m.GasPrice == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("gasPrice")
	} else {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEthereumTypes(dAtA, i, uint64(len(m.GasPrice)))
		i += copy(dAtA[i:], m.GasPrice)
	}
	if m.GasLimit == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("gasLimit")
	} else {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintEthereumTypes(dAtA, i, uint64(len(m.GasLimit)))
		i += copy(dAtA[i:], m.GasLimit)
	}
	if m.RecipientAddress != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintEthereumTypes(dAtA, i, uint64(len(m.RecipientAddress)))
		i += copy(dAtA[i:], m.RecipientAddress)
	}
	if m.Coins == nil {
		return 0, github_com_gogo_protobuf_proto.NewRequiredNotSetError("coins")
	} else {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintEthereumTypes(dAtA, i, uint64(len(m.Coins)))
		i += copy(dAtA[i:], m.Coins)
	}
	if m.ChainId != nil {
		dAtA[i] = 0x30
		i++
		i = encodeVarintEthereumTypes(dAtA, i, uint64(*m.ChainId))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintEthereumTypes(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *EthereumTransactionType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Nonce != nil {
		l = len(m.Nonce)
		n += 1 + l + sovEthereumTypes(uint64(l))
	}
	if m.GasPrice != nil {
		l = len(m.GasPrice)
		n += 1 + l + sovEthereumTypes(uint64(l))
	}
	if m.GasLimit != nil {
		l = len(m.GasLimit)
		n += 1 + l + sovEthereumTypes(uint64(l))
	}
	if m.RecipientAddress != nil {
		l = len(m.RecipientAddress)
		n += 1 + l + sovEthereumTypes(uint64(l))
	}
	if m.Coins != nil {
		l = len(m.Coins)
		n += 1 + l + sovEthereumTypes(uint64(l))
	}
	if m.ChainId != nil {
		n += 1 + sovEthereumTypes(uint64(*m.ChainId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovEthereumTypes(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozEthereumTypes(x uint64) (n int) {
	return sovEthereumTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EthereumTransactionType) Unmarshal(dAtA []byte) error {
	var hasFields [1]uint64
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEthereumTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EthereumTransactionType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EthereumTransactionType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEthereumTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEthereumTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nonce = append(m.Nonce[:0], dAtA[iNdEx:postIndex]...)
			if m.Nonce == nil {
				m.Nonce = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000001)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasPrice", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEthereumTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEthereumTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GasPrice = append(m.GasPrice[:0], dAtA[iNdEx:postIndex]...)
			if m.GasPrice == nil {
				m.GasPrice = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000002)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasLimit", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEthereumTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEthereumTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GasLimit = append(m.GasLimit[:0], dAtA[iNdEx:postIndex]...)
			if m.GasLimit == nil {
				m.GasLimit = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000004)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecipientAddress", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEthereumTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEthereumTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecipientAddress = append(m.RecipientAddress[:0], dAtA[iNdEx:postIndex]...)
			if m.RecipientAddress == nil {
				m.RecipientAddress = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coins", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEthereumTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthEthereumTypes
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Coins = append(m.Coins[:0], dAtA[iNdEx:postIndex]...)
			if m.Coins == nil {
				m.Coins = []byte{}
			}
			iNdEx = postIndex
			hasFields[0] |= uint64(0x00000008)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEthereumTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ChainId = &v
		default:
			iNdEx = preIndex
			skippy, err := skipEthereumTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEthereumTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}
	if hasFields[0]&uint64(0x00000001) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("nonce")
	}
	if hasFields[0]&uint64(0x00000002) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("gasPrice")
	}
	if hasFields[0]&uint64(0x00000004) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("gasLimit")
	}
	if hasFields[0]&uint64(0x00000008) == 0 {
		return github_com_gogo_protobuf_proto.NewRequiredNotSetError("coins")
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEthereumTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEthereumTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEthereumTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEthereumTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthEthereumTypes
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowEthereumTypes
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipEthereumTypes(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthEthereumTypes = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEthereumTypes   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("ethereum_types.proto", fileDescriptor_ethereum_types_fb0e9e73f4fb0ced)
}

var fileDescriptor_ethereum_types_fb0e9e73f4fb0ced = []byte{
	// 238 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x3c, 0x8f, 0xc1, 0x4a, 0xc3, 0x40,
	0x10, 0x86, 0xd9, 0x6a, 0x35, 0x2c, 0x2d, 0x68, 0x28, 0xb8, 0x7a, 0x08, 0xc1, 0x53, 0x40, 0xe8,
	0x3b, 0x58, 0xe8, 0x41, 0xf0, 0x20, 0xb1, 0x27, 0x2f, 0x61, 0xdd, 0x8c, 0xed, 0x60, 0x33, 0x1b,
	0x76, 0xa6, 0x48, 0x1e, 0x50, 0xf0, 0xe8, 0x23, 0x48, 0x9e, 0x44, 0x92, 0xb4, 0x39, 0x0d, 0xdf,
	0xff, 0x31, 0xfc, 0xfc, 0x7a, 0x01, 0xb2, 0x83, 0x00, 0x87, 0xaa, 0x90, 0xa6, 0x06, 0x5e, 0xd6,
	0xc1, 0x8b, 0xbf, 0xff, 0x56, 0xfa, 0x66, 0x7d, 0x14, 0x9b, 0x60, 0x89, 0xad, 0x13, 0xf4, 0xb4,
	0x69, 0x6a, 0x88, 0x17, 0x7a, 0x4a, 0x9e, 0x1c, 0x18, 0x95, 0x4e, 0xb2, 0x59, 0x3e, 0x40, 0x7c,
	0xa7, 0xa3, 0xad, 0xe5, 0x97, 0x80, 0x0e, 0xcc, 0xa4, 0x17, 0x23, 0x1f, 0xdd, 0x33, 0x56, 0x28,
	0xe6, 0x6c, 0x74, 0x3d, 0xc7, 0x0f, 0xfa, 0x3a, 0x80, 0xc3, 0x1a, 0x81, 0xa4, 0xb0, 0x65, 0x19,
	0x80, 0xd9, 0x9c, 0xa7, 0x2a, 0x9b, 0xe5, 0x57, 0xa3, 0x78, 0x1c, 0xf2, 0xae, 0xda, 0x79, 0x24,
	0x36, 0xd3, 0xa1, 0xba, 0x87, 0xf8, 0x56, 0x47, 0x6e, 0x67, 0x91, 0x0a, 0x2c, 0xcd, 0x45, 0xaa,
	0xb2, 0x79, 0x7e, 0xd9, 0xf3, 0x53, 0xb9, 0x5a, 0xff, 0xb4, 0x89, 0xfa, 0x6d, 0x13, 0xf5, 0xd7,
	0x26, 0x4a, 0x27, 0x04, 0xb2, 0xe4, 0xcf, 0xa6, 0x7b, 0xeb, 0xee, 0x97, 0xdd, 0xef, 0x41, 0x86,
	0xc9, 0xef, 0x87, 0x8f, 0xd5, 0xfc, 0xf5, 0x94, 0x75, 0x43, 0xdf, 0xa2, 0x0a, 0x98, 0xed, 0x16,
	0xf8, 0x3f, 0x00, 0x00, 0xff, 0xff, 0xf0, 0x1a, 0x79, 0x36, 0x25, 0x01, 0x00, 0x00,
}
